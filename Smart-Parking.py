# -*- coding: utf-8 -*-
"""Project_DIP_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y8IlspHr2yG7NKMzFePo3s8gjevAUIZL
"""

import cv2
import numpy as np
import os
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

print("\n\n\t\t**************SMART PARKING USING IMAGE PROCESSING*****************\n\n")


#Storing the image of vacant parking area
img = cv2.imread('EmptySlots.jpg',1)    
plt.figure(figsize=(13,13))
plt.imshow(img)
plt.axis('off')
plt.title('FIGURE : EMPTY PARKING AREA')
plt.show()

#Applying Canny edge Detection to empty Parking Area
img1 = cv2.imread('EmptySlots.jpg',0)
edges = cv2.Canny(img1,100,200)
plt.figure(figsize=(13,13))
plt.imshow(edges)
plt.axis('off')
plt.title('\n\n\nFIGURE : APPLYING CANNY EDGE DETECTION TO EMPTY PARKING AREA')
plt.show()
height,width = img1.shape
print("\t\t\t\tHeight of the image is : ",height,end='\n')
print("\t\t\t\tWidth of the image is  : ",width,end=' ')

#Storing the image of Non-Vacant parking area
images = []
for filename in os.listdir('pics'):
    img3 = cv2.imread(os.path.join('pics',filename))
    if img3 is not None:
          images.append(img3)  
 
          #img3 = cv2.imread(img,1)
          plt.figure(figsize=(13,13))
          plt.imshow(img3)
          plt.axis('off')
          plt.title('\n\nFIGURE : NON VACANT PARKING AREA')
          plt.show()
          

          #Applying Canny edge Detection to non empty Parking Area
          img5 = cv2.resize(img3,(width,height),interpolation = cv2.INTER_AREA)
          edges1 = cv2.Canny(img5,100,200)
          plt.figure(figsize=(13,13))
          plt.imshow(edges1)
          plt.axis('off')
          plt.title('\n\n\nFIGURE : APPLYING CANNY EDGE DETECTION TO NON EMPTY PARKING AREA')
          plt.show()


          #Calculating Difference edges
          result_edges = edges1-edges
          plt.figure(figsize=(13,13))
          plt.imshow(result_edges)
          plt.axis('off')
          plt.title('\n\n\nFIGURE : DIFFERENCE EDGES')
          plt.show()

          #Calculating slot numbers for lane 1 
          start = (56,70)
          lane1 = []
          print("\n\nEMPTY SLOTS IN LANE 1 ARE : ")
          while start[0] < 540:
            crop = result_edges[start[1]:start[1]+60,start[0]+10:start[0]+20]
            box = np.array(crop)
            count = np.count_nonzero(crop)
            if count < 35:
              slot = (start[0]-56)/29
              lane1.append(int(slot+1))
            increment  = (start[0]+29,start[1])
            start = increment
          print(lane1)

          #For Lane 2
          lane2 = []
          start = (56,139)
          print("\nEMPTY SLOTS IN LANE 2 ARE :")
          while start[0] < 540:
            crop = result_edges[start[1]:start[1]+60,start[0]+10:start[0]+20]
            box = np.array(crop)
            count = np.count_nonzero(crop)
            if count < 35:
              slot = (start[0]-56)/29
              lane2.append(int(slot+1))
            increment  = (start[0]+29,start[1])
            start = increment
          print(lane2)


          #For Lane 3
          start = (52,270)
          lane3 = []
          print("\nEMPTY SLOTS IN LANE 3 ARE :")
          while start[0] < 540:
            crop = result_edges[start[1]:start[1]+60,start[0]+10:start[0]+20]
            box = np.array(crop)
            count = np.count_nonzero(crop)
            if count < 35:
              slot = (start[0]-52)/30
              lane3.append(int(slot+1))
            increment  = (start[0]+30,start[1])
            start = increment
          print(lane3)


          #For Lane 4
          lane4 = []
          start = (52,342)
          print("\nEMPTY SLOTS IN LANE 4 ARE :")
          while start[0] < 540:
            crop = result_edges[start[1]:start[1]+60,start[0]+10:start[0]+20]
            box = np.array(crop)
            count = np.count_nonzero(crop)
            if count < 35:
              slot = (start[0]-52)/30
              lane4.append(int(slot+1))
            increment  = (start[0]+30,start[1])
            start = increment
          print(lane4)
  #h=h-1
  #i=int(i)
  #i=i+1
  #i=str(i)

